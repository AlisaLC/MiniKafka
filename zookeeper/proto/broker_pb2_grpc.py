# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import broker_pb2 as broker__pb2


class BrokerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ack = channel.unary_unary(
                '/Broker/Ack',
                request_serializer=broker__pb2.Empty.SerializeToString,
                response_deserializer=broker__pb2.Empty.FromString,
                )
        self.Push = channel.unary_unary(
                '/Broker/Push',
                request_serializer=broker__pb2.Message.SerializeToString,
                response_deserializer=broker__pb2.PushResponse.FromString,
                )
        self.Pull = channel.unary_unary(
                '/Broker/Pull',
                request_serializer=broker__pb2.Empty.SerializeToString,
                response_deserializer=broker__pb2.Message.FromString,
                )
        self.SetReplica = channel.unary_unary(
                '/Broker/SetReplica',
                request_serializer=broker__pb2.ReplicaRequest.SerializeToString,
                response_deserializer=broker__pb2.Empty.FromString,
                )
        self.LeadReplica = channel.unary_unary(
                '/Broker/LeadReplica',
                request_serializer=broker__pb2.ReplicaID.SerializeToString,
                response_deserializer=broker__pb2.Empty.FromString,
                )
        self.PushReplica = channel.unary_unary(
                '/Broker/PushReplica',
                request_serializer=broker__pb2.MessageList.SerializeToString,
                response_deserializer=broker__pb2.PushResponse.FromString,
                )
        self.DropReplicaMessages = channel.unary_unary(
                '/Broker/DropReplicaMessages',
                request_serializer=broker__pb2.MessageCount.SerializeToString,
                response_deserializer=broker__pb2.Empty.FromString,
                )


class BrokerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Ack(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Push(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Pull(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetReplica(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LeadReplica(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PushReplica(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DropReplicaMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BrokerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ack': grpc.unary_unary_rpc_method_handler(
                    servicer.Ack,
                    request_deserializer=broker__pb2.Empty.FromString,
                    response_serializer=broker__pb2.Empty.SerializeToString,
            ),
            'Push': grpc.unary_unary_rpc_method_handler(
                    servicer.Push,
                    request_deserializer=broker__pb2.Message.FromString,
                    response_serializer=broker__pb2.PushResponse.SerializeToString,
            ),
            'Pull': grpc.unary_unary_rpc_method_handler(
                    servicer.Pull,
                    request_deserializer=broker__pb2.Empty.FromString,
                    response_serializer=broker__pb2.Message.SerializeToString,
            ),
            'SetReplica': grpc.unary_unary_rpc_method_handler(
                    servicer.SetReplica,
                    request_deserializer=broker__pb2.ReplicaRequest.FromString,
                    response_serializer=broker__pb2.Empty.SerializeToString,
            ),
            'LeadReplica': grpc.unary_unary_rpc_method_handler(
                    servicer.LeadReplica,
                    request_deserializer=broker__pb2.ReplicaID.FromString,
                    response_serializer=broker__pb2.Empty.SerializeToString,
            ),
            'PushReplica': grpc.unary_unary_rpc_method_handler(
                    servicer.PushReplica,
                    request_deserializer=broker__pb2.MessageList.FromString,
                    response_serializer=broker__pb2.PushResponse.SerializeToString,
            ),
            'DropReplicaMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.DropReplicaMessages,
                    request_deserializer=broker__pb2.MessageCount.FromString,
                    response_serializer=broker__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Broker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Broker(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Ack(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Broker/Ack',
            broker__pb2.Empty.SerializeToString,
            broker__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Push(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Broker/Push',
            broker__pb2.Message.SerializeToString,
            broker__pb2.PushResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Pull(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Broker/Pull',
            broker__pb2.Empty.SerializeToString,
            broker__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetReplica(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Broker/SetReplica',
            broker__pb2.ReplicaRequest.SerializeToString,
            broker__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LeadReplica(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Broker/LeadReplica',
            broker__pb2.ReplicaID.SerializeToString,
            broker__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PushReplica(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Broker/PushReplica',
            broker__pb2.MessageList.SerializeToString,
            broker__pb2.PushResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DropReplicaMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Broker/DropReplicaMessages',
            broker__pb2.MessageCount.SerializeToString,
            broker__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
